name: MQTT Publish on Commit

on:
  push:
    branches:
      - master  # Monitor commits on the 'master' 

jobs:
  publish:
    runs-on: ubuntu-latest # Ubuntu machine for CI (Continuous Integration)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies (Mosquitto + jq + OpenSSL + mbedTLS)
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto-clients jq openssl libmbedtls-dev gcc

      - name: Extract Latest Firmware URL
        id: extract_url
        run: |
          URL=$(jq -r '.firmware_versions[0].url' versions.json)
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Apply PKCS#7 Padding to URL
        id: apply_padding
        run: |
          URL_LENGTH=${#URL}
          BLOCK_SIZE=16
          PADDING=$((BLOCK_SIZE - (URL_LENGTH % BLOCK_SIZE)))
          PADDED_URL="$URL$(printf "%0.s$(printf '\x%02x' "$PADDING")" $(seq 1 $PADDING))"
          echo "PADDED_URL=$PADDED_URL" >> $GITHUB_ENV
          echo "PADDED_LENGTH=$((URL_LENGTH + PADDING))" >> $GITHUB_ENV
          echo "PADDING=$PADDING" >> $GITHUB_ENV

      - name: Publish Padded Length to MQTT Topic
        run: |
          mosquitto_pub -h test.mosquitto.org -t "esp32/pad" -m "$PADDED_LENGTH"

      - name: Publish IV to MQTT
        env:
          AES_IV: ${{ secrets.AES_IV }}   # Using AES IV from GitHub secrets
        run: |
          mosquitto_pub -h test.mosquitto.org -t "esp32/iv" -m "$AES_IV"

      - name: Publish Key to MQTT
        env:
          AES_KEY: ${{ secrets.AES_KEY }}  # Using AES Key from GitHub secrets
        run: |
          mosquitto_pub -h test.mosquitto.org -t "esp32/key" -m "$AES_KEY"

      - name: Encrypt the Padded URL using AES
        id: encrypt_padded_url
        env:
          AES_KEY: ${{ secrets.AES_KEY }}   # Using AES KEY from secrets
          AES_IV: ${{ secrets.AES_IV }}     # Using AES IV from secrets
          PADDED_URL: ${{ env.PADDED_URL }} # The padded URL
        run: |
          echo -n "$URL" | openssl enc -aes-128-cbc -K $(echo -n $AES_KEY | xxd -p) -iv $(echo -n $AES_IV | xxd -p) -out encrypted_url.bin
          ENCRYPTED_URL_HEX=$(xxd -p encrypted_url.bin | tr -d '\n')
          echo "ENCRYPTED_URL_HEX=$ENCRYPTED_URL_HEX" >> $GITHUB_ENV

      - name: Compile HMAC Program with mbedTLS
        run: |
          echo '
          #include "mbedtls/md.h"
          #include <stdio.h>
          #include <string.h>
          
          void hex_to_bytes(const char* hex, unsigned char* bytes, size_t* length) {
              size_t hex_len = strlen(hex);
              *length = hex_len / 2; // Each byte is represented by two hex characters
              for (size_t i = 0; i < *length; i++) {
                  sscanf(hex + (2 * i), "%2hhx", &bytes[i]);
              }
          }

          void compute_hmac(const char* key_hex, const char* message_hex) {
              unsigned char key[64], message[256], output[32];
              size_t key_len, message_len;
          
              // Convert hex strings to raw bytes
              hex_to_bytes(key_hex, key, &key_len);
              hex_to_bytes(message_hex, message, &message_len);
          
              // Initialize HMAC
              mbedtls_md_context_t ctx;
              const mbedtls_md_info_t* md_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
          
              mbedtls_md_init(&ctx);
              mbedtls_md_setup(&ctx, md_info, 1);
              mbedtls_md_hmac_starts(&ctx, key, key_len);
              mbedtls_md_hmac_update(&ctx, message, message_len);
              mbedtls_md_hmac_finish(&ctx, output);
              mbedtls_md_free(&ctx);
          
              // Print HMAC as a hex string
              for (int i = 0; i < 32; i++) printf("%02x", output[i]);
              printf("\n");
          }
          
          int main(int argc, char* argv[]) {
              if (argc != 3) {
                  printf("Usage: %s <key_hex> <message_hex>\n", argv[0]);
                  return 1;
              }
          
              compute_hmac(argv[1], argv[2]);
              return 0;
          }

          ' > compute_hmac.c
          gcc -o compute_hmac compute_hmac.c -lmbedtls -lmbedcrypto -lmbedx509

      - name: Generate MAC using mbedTLS
        id: generate_mac
        env:
          AES_KEY: ${{ secrets.AES_KEY }}   # Using AES KEY 
          ENCRYPTED_URL_HEX: ${{ env.ENCRYPTED_URL_HEX }}
        run: |
          MAC=$(./compute_hmac "313233" "$ENCRYPTED_URL_HEX")
          echo "MAC=$MAC" >> $GITHUB_ENV

      - name: Publish Encrypted URL and MAC to MQTT Topic
        run: |
          mosquitto_pub -h test.mosquitto.org -t "inTopic" -m "$ENCRYPTED_URL_HEX"
          mosquitto_pub -h test.mosquitto.org -t "esp32/mac" -m "$MAC"

      - name: Publish Timestamp to MQTT Topic
        run: |
          TIMESTAMP=$(TZ="UTC+3" date +"%Y-%m-%d %H:%M:%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          mosquitto_pub -h test.mosquitto.org -t "timestamp" -m "$TIMESTAMP"
