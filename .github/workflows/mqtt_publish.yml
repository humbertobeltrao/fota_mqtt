name: MQTT Publish on Commit

on:
  push:
    branches:
      - master  # Monitor commits on the 'master' branch

jobs:
  publish:
    runs-on: ubuntu-latest # Ubuntu machine for CI purposes only

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies (Mosquitto + jq + OpenSSL)
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto-clients jq openssl

      - name: Extract Latest Firmware URL
        id: extract_url
        run: |
          URL=$(jq -r '.firmware_versions[0].url' versions.json) 
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Publish IV to MQTT
        env:
          AES_IV: ${{ secrets.AES_IV }} 
          NEW_IV: ${{ secrets.AES_IV }} # Using AES IV from GitHub Secrets
        run: |
          # Publish the IV to an MQTT topic for ESP32 decryption
          mosquitto_pub -h test.mosquitto.org -t "esp32/iv" -m "$NEW_IV"

      - name: Publish Key to MQTT
        env:
          AES_KEY: ${{ secrets.AES_KEY }}  # Using AES Key from GitHub Secrets
        run: |
          # Publish the AES Key to an MQTT topic for ESP32 decryption
          mosquitto_pub -h test.mosquitto.org -t "esp32/key" -m "$AES_KEY"

      - name: Pad URL to PKCS #7 and Encrypt it using AES
        id: encrypt_url
        env:
          AES_KEY: ${{ secrets.AES_KEY }}   # Using AES KEY from secrets
          AES_IV: ${{ secrets.AES_IV }}     # Using AES IV from secrets
        run: |
          # Function to apply PKCS #7 padding
          pad_input() {
            local input="$1"
            local block_size=16
            local len=$(echo -n "$input" | wc -c)
            local pad_len=$((block_size - (len % block_size)))
            local padding=$(printf "%0.s$pad_len" {1..$pad_len})
            echo -n "$input$padding"
            echo "$len $pad_len"  # Output both the input length and padding length
          }

          # Pad the URL using PKCS #7
          PADDED_RESULT=$(pad_input "$URL")
          Padded_URL=$(echo "$PADDED_RESULT" | cut -d' ' -f1-)
          input_len=$(echo "$PADDED_RESULT" | cut -d' ' -f1)
          pad_len=$(echo "$PADDED_RESULT" | cut -d' ' -f2)

          # Publish the input_len + pad_len to the esp/pad topic
          mosquitto_pub -h test.mosquitto.org -t "esp/pad" -m "$((input_len + pad_len))"

          # Encrypt the padded URL with AES-128-CBC mode using OpenSSL
          echo -n "$Padded_URL" | openssl enc -aes-128-cbc -K $(echo -n $AES_KEY | xxd -p) -iv $(echo -n $AES_IV | xxd -p) -out encrypted_url.bin
          
          # Convert the encrypted binary data to hex format
          ENCRYPTED_URL_HEX=$(xxd -p encrypted_url.bin | tr -d '\n')
          echo "ENCRYPTED_URL_HEX=$ENCRYPTED_URL_HEX" >> $GITHUB_ENV

      - name: Publish Encrypted URL to MQTT Topic
        run: |
          mosquitto_pub -h test.mosquitto.org -t "inTopic" -m "$ENCRYPTED_URL_HEX"
